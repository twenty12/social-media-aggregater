{"version":3,"sources":["features/Header.tsx","features/Home.tsx","features/feed/PostCard.tsx","redux/modules/index.tsx","redux/modules/posts.tsx","redux/modules/teams.tsx","features/feed/Feed.tsx","App.tsx","redux/reducer.tsx","redux/store.tsx","index.tsx"],"names":["raceSlugToName","NavBar","eventSlug","useParams","className","to","Home","nameToEmoji","UK","JPN","DE","FRN","CH","IT","PostCard","postData","accountData","useState","showThumb","setShowThumb","thumbDiv","src","thumbnail","videoDiv","source_id","allow","title","text","regex","created","Date","Object","keys","length","sailor","name","toLocaleString","RegExp","split","map","str","test","boat","flag","header","onClick","id","typedAction","type","payload","initialState","posts","loading","pageNumber","showInfo","loadPosts","dispatch","fetch","getServerUrl","getPageUrl","then","res","json","result","accounts","timePassedSinceUpdate","counting","loadAccounts","clockElapsedTime","padToTwo","number","slice","Feed","useDispatch","useSelector","state","post","team","useEffect","console","log","interval","setInterval","clearInterval","arr","loadingDiv","reduce","acc","cur","i","postItems","account","ref","useRef","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect","useOnScreen","getTimeElapsed","updated","timeDiff","getTime","seconds","Math","round","floor","minutes","hours","getInfoCard","App","path","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a19a0a0.chunk.js","sourcesContent":["import React from 'react';\nimport {useParams, Link} from \"react-router-dom\"\n\nexport interface ParamTypes {\n    eventSlug: string\n  }\n\nconst raceSlugToName: { [key: string]: string; } = {\n    'vendee-globe': 'Vend√©e Globe',\n    'americas-cup': \"America's Cup\"\n}\nexport default function NavBar () {\n    const { eventSlug } = useParams<ParamTypes>()\n    const createdTag = <small>By <a className=\"text-black\" href=\"http://danielgladstone.com\">Daniel Gladstone</a></small>\n    return (\n        <nav className=\"navbar navbar-default border-bottom\">\n            <div className=\"\">\n                <h1 className=\"mb-n3\"><Link to=\"/\">Spun</Link> | {raceSlugToName[eventSlug]}</h1>\n                <br></br>\n                <div className=\"mb-n2 mt-n1\">\n                    {/* {createdTag} */}\n                </div>\n\n\n            </div>\n        </nav>\n    )\n}","import React, { useEffect, FunctionComponent, useState, useRef } from 'react'\nimport {Link} from \"react-router-dom\";\nconst Home: FunctionComponent = () => {\n    return (\n    <div className=\"container\">\n            Content streams from the great regettas.\n            <ul>\n                <li>\n                    <Link to=\"race/vendee-globe\">The Vendee Globe</Link>\n                </li>\n                <li>\n                    <Link to=\"race/americas-cup\">The America's Cup</Link>\n                </li>\n            </ul>\n    </div>\n    )\n}\n\nexport default Home","import React, { FunctionComponent, useEffect, useState } from \"react\"\nimport { Post } from '../../redux/modules/posts'\nimport { Account } from '../../redux/modules/teams'\n\ntype PostProps = {\n    postData: Post,\n    accountData: Account\n    // sailorData: Sailor,\n    // boatData: Boat\n}\n\nvar nameToEmoji: { [key: string]: string; } = {\n    UK: 'üá¨üáß',\n    JPN: 'üáØüáµ',\n    DE: 'üá©üá™',\n    FRN: 'üá´üá∑',\n    CH: 'üá®üá≠',\n    IT: 'üáÆüáπ'\n};\n\nconst wrapTags = (text: string, regex: RegExp, className?: string) => {\n    const textArray = text.split(regex);\n    return textArray.map(str => {\n      if (RegExp(':').test(str)) {\n        return <span className=\"d-block d-md-inline\">{str}</span>;\n      }\n      return str;\n    });\n  };\n\nconst PostCard: FunctionComponent<PostProps> = ({ postData, accountData }) => {\n    const [showThumb, setShowThumb] = useState(true)\n    const header = () => {\n        const created: Date = new Date(postData.created)\n        if (Object.keys(accountData).length != 0) {\n            const getPosition = () => accountData.sailor.boat?.position === 0 ? 'RET' : accountData.sailor.boat?.position\n            return (\n                <div>\n                    <div className=\"d-flex\">\n                        <div className=\"mr-auto \">{accountData.sailor ? accountData.sailor.name : accountData.name}</div>\n                        <small className=\"mt-2 mb-n2\">{accountData.sailor ? wrapTags(created.toLocaleString(), RegExp(','), '') : ''}</small>\n                    </div>\n                    <small><i>{accountData.sailor ? accountData.sailor.boat?.name : ''} {nameToEmoji[accountData.flag]} </i></small><br></br>\n                    {/* <small>{accountData.sailor ? 'Position: ' + getPosition() : ''}</small> */}\n                </div>\n            )\n        }\n    }\n\n    const handleClick = () => setShowThumb(false)\n    const thumbDiv = <img className=\"img-fluid\" src={postData.thumbnail} />\n    // const thumbDiv = <img className=\"img-fluid\" src={`http://i.ytimg.com/vi/${postData.source_id}/maxresdefault.jpg`}  onError={(e)=>{console.log(e)}}/>\n    const videoDiv = <div className=\"embed-responsive embed-responsive-16by9\">\n        <iframe\n            className=\"embed-responsive-item border-0\"\n            src={`https://www.youtube.com/embed/${postData.source_id}?&autoplay=1`}\n            allow='autoplay; encrypted-media'\n            title='video'\n        />\n    </div>\n\n    return (\n        <div key={postData.id} className=\"row justify-content-center\">\n            <div className=\"my-2 col-sm-12 col-md-8\">\n                <div className=\"card border-dark\">\n                    <div className=\"card-header bg-white border-0 pb-0\">\n                        {header()}\n                    </div>\n                    <div onClick={handleClick} className=\"card-body d-flex justify-content-center\">\n                        { showThumb ? thumbDiv : videoDiv }\n                    </div>\n                    <div className=\"card-footer bg-white border-0 pt-0\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default PostCard","export function typedAction<T extends string>(type: T): { type: T };\n\nexport function typedAction<T extends string, P extends any>(\n    type: T,\n    payload: P\n): { type: T; payload: P };\n\nexport function typedAction(type: string, payload?: any) {\n    return { type, payload };\n}","import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nimport { createImportSpecifier } from 'typescript';\n\n\nexport type Post = {\n    id: number,\n    account: number,\n    created: string,\n    collected: string,\n    title: string,\n    description: string,\n    url: string\n    source_id?: string,\n    thumbnail?: string,\n}\n\nexport type PostState = {\n    posts: Post[];\n    loading: boolean;\n    pageNumber: number;\n    showInfo: boolean;\n};\n\nconst initialState: PostState = {\n    posts: [],\n    loading: true,\n    pageNumber: 1,\n    showInfo: false\n};\n\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\n\nconst getPageUrl = (pageNumber:number, eventSlug:string) => {\n    return getServerUrl() + \"api/posts/?page=\" + pageNumber + '&account__events__name=' + eventSlug\n}\nexport const addPosts = (products: Post[]) => {\n    return typedAction('posts/ADD_POSTS', products);\n};\n\nexport const loadPosts = (pageNumber:number, eventSlug:string) => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getPageUrl(pageNumber, eventSlug))\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addPosts(result['results'])\n                );\n            })\n    };\n};\n\ninterface ActionB {\n    type: 'posts/TOGGLE_INFO';\n}\nexport const toggleInfo = () => {\n    return typedAction('posts/TOGGLE_INFO');\n};\n\ntype PostAction = ReturnType<typeof addPosts> | ActionB;\n\nexport function postReducer(\n    state = initialState,\n    action: PostAction\n): PostState {\n    switch (action.type) {\n        case 'posts/ADD_POSTS':\n            return {\n                ...state,\n                loading: false,\n                pageNumber: state.pageNumber + 1,\n                posts: [...state.posts, ...action.payload],\n            };\n        case 'posts/TOGGLE_INFO':\n            return {\n                ...state,\n                showInfo: !state.showInfo\n            };\n        default:\n            return state;\n    }\n}","import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nimport { count } from 'console';\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\nexport type Account = {\n    id: number,\n    sailor: Sailor,\n    team?: Team,\n    platform: string,\n    account_id: string,\n    name: string,\n    flag: string,\n    updated: string,\n}\n\nexport type Sailor = {\n    id: number,\n    name: string,\n    gender: string\n    age: number,\n    boat?: Boat,\n    team?: Team\n}\n\nexport type Boat = {\n    id: number,\n    name?: string,\n    built: string,\n    position?: number\n}\n\nexport type Team = {\n    name: string,\n    boat: Boat\n};\n\nexport type AccountState = {\n    accounts: Account[],\n    timePassedSinceUpdate: number,\n    counting: boolean\n}\n\nconst initialState: AccountState = {\n    accounts: [],\n    timePassedSinceUpdate: 0,\n    counting: false\n};\n\nexport const addAccount = (account:Account[]) => {\n    return typedAction('teams/ADD_ACCOUNT', account);\n};\n\nexport const startCounter = () => {\n    return typedAction('teams/START_COUNTER')\n}\n\nexport const clockTime = () => {\n    return typedAction('teams/CLOCK_TIME')\n}\n\nexport const loadAccounts = (eventSlug:string) => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getServerUrl() + \"api/accounts/?events__name=\" + eventSlug)\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addAccount(result['results'])\n                );\n            })\n    };\n};\n// export const toggleCountera = () => {\n//     return (dispatch: Dispatch<AnyAction>) => {\n//         dispatch(toggleCounterAction())\n//     }\n// }\n\nexport const clockElapsedTime = () => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        dispatch(\n            clockTime()\n        )\n    }\n}\ninterface Action {\n    type: 'teams/CLOCK_TIME';\n}\ninterface StartCounter {\n    type: 'teams/START_COUNTER'\n}\ntype ActionType = ReturnType<typeof addAccount> | Action | StartCounter\n\n\nexport function teamReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case 'teams/ADD_ACCOUNT':\n            return {\n                ...state,\n                accounts: [...state.accounts, ...action.payload],\n            };\n        case 'teams/CLOCK_TIME':\n            return {\n                ...state,\n                timePassedSinceUpdate: state.timePassedSinceUpdate + 1\n            }\n        case 'teams/START_COUNTER':\n            return {\n                ...state,\n                counting: true            }    \n        default:\n            return state;\n    }\n}","import React, { useEffect, FunctionComponent, useState, useRef } from 'react'\nimport PostCard from './PostCard'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { loadPosts, toggleInfo } from \"../../redux/modules/posts\"\nimport { loadAccounts, Account, clockElapsedTime, startCounter } from \"../../redux/modules/teams\"\nimport { RootState } from \"../../redux/reducer\"\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\nimport {useParams, Link} from \"react-router-dom\"\nimport {ParamTypes} from \"../Header\"\n\nconst arrToObjKeyedById = (arr: any) => {\n    console.log('array to key')\n    console.log(arr)\n    return arr.reduce(function (acc: any, cur: any, i: number) {\n        acc[cur['id']] = cur;\n        return acc;\n    }, {});\n}\nconst padToTwo = (number: number) => number <= 9999 ? `000${number}`.slice(-2) : number;\n\nfunction useOnScreen(ref: any) {\n    const [isIntersecting, setIntersecting] = useState(false)\n    const observer = new IntersectionObserver(\n        ([entry]) => setIntersecting(entry.isIntersecting)\n    )\n\n    useEffect(() => {\n        observer.observe(ref.current)\n        // Remove the observer as soon as the component is unmounted\n        return () => { observer.disconnect() }\n    }, [])\n\n    return isIntersecting\n}\n\nconst Feed: FunctionComponent = () => {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n    const timePassedSinceUpdate = useSelector((state: RootState) => state.team.timePassedSinceUpdate)\n    const counting = useSelector((state: RootState) => state.team.counting)\n    const {eventSlug} = useParams<ParamTypes>()\n\n    const showInfo = useSelector((state: RootState) => state.post.showInfo)\n    useEffect(() => {\n        console.log('render')\n        dispatch(loadAccounts(eventSlug) as any)\n        dispatch(loadPosts(pageNumber, eventSlug) as any)\n        // dispatch(loadBoats() as any)\n    }, [])\n\n    useEffect(() => {\n        if (counting){\n            const interval = setInterval(() => {\n                dispatch(clockElapsedTime() as any)\n              }, 1000);\n              return () => clearInterval(interval);\n            }\n      }, [counting]);\n\n\n    const posts = useSelector((state: RootState) => state.post.posts)\n    const loading = useSelector((state: RootState) => state.post.loading)\n    const loadingDiv = (loading) ? <h1>Loading...</h1> : ''\n    const accounts = arrToObjKeyedById(\n        useSelector((state: RootState) => state.team.accounts))\n\n    const postItems = posts.map((post) => {\n        const getAccountDataWhenOnceAvailable = () => (Object.keys(accounts).length === 0) ? {} : accounts[post.account!]\n        // const getBoatDataWhenOnceAvailable = () => (Object.keys(boats).length === 0) ? {} : boats[post.boatId!]\n        return <PostCard\n            postData={post}\n            accountData={getAccountDataWhenOnceAvailable()} />\n    })\n    \n    const ref = useRef<HTMLHeadingElement>(null);\n    const isVisible = useOnScreen(ref)\n    if (isVisible && pageNumber > 1) {\n        dispatch(loadPosts(pageNumber, eventSlug) as any)\n    }\n    const getDateString = (updated: string) => {\n        const created: Date = new Date(updated)\n        return created.toLocaleString()\n    }\n    const getTimeElapsed = (updated: string) => {\n        if (!counting) {\n            dispatch(startCounter() as any)\n        }\n        const created: Date = new Date(updated)\n        const current: Date = new Date()\n        var timeDiff: number = current.getTime() - created.getTime()\n\n        timeDiff /= 1000;\n        var seconds = Math.round(timeDiff % 60);\n        timeDiff = Math.floor(timeDiff / 60);\n        var minutes = Math.round(timeDiff % 60);\n        timeDiff = Math.floor(timeDiff / 60);\n        var hours = Math.round(timeDiff % 24);\n        timeDiff = Math.floor(timeDiff / 24);\n\n        return padToTwo(hours) + \":\" + padToTwo(minutes) + \":\" + padToTwo(seconds)\n    }\n    const getInfoCard = () => {\n        if (showInfo) {\n            return (\n                <div className=\"col-sm-12 mt-1 col-md-8 d-flex\">\n                    <div className=\"card border-dark w-100 \">\n                        <div className=\"card-body py-1\">\n                            <div><small>Accounts monitored: {Object.keys(accounts).length}</small></div>\n                            <div><small>Time since YouTube check: { (Object.keys(accounts).length < 2 ? '' : getTimeElapsed(accounts[Object.keys(accounts)[0]].updated))}</small></div>\n                            {/* <div><small>Last updated race positions: { (Object.keys(accounts).length < 2 ? 'a' : getDateString(accounts['1'].updated))}</small></div> */}\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-sm-12 mt-1 col-md-8 d-flex\">\n                    <AiOutlineInfoCircle onClick={() => dispatch(toggleInfo() as any)} />\n                </div>\n                {getInfoCard()}\n            </div>\n            {postItems}\n            {loadingDiv}\n            <div ref={ref}></div>\n        </div>\n    )\n}\n\nexport default Feed","import React from 'react';\nimport NavBar from \"./features/Header\"\nimport Home from './features/Home'\nimport Feed from \"./features/feed/Feed\"\nimport './App.css';\nimport { loadPosts } from \"./redux/modules/posts\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport './index.css';\nimport { RootState } from \"./redux/reducer\"\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\n\n  \nfunction App() {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n\n    return (\n        <Router>\n\n            {/* <button onClick={() => dispatch(loadPosts(pageNumber) as any)}>Load em</button> */}\n            <Switch>\n\n                <Route path=\"/race/:eventSlug\">\n                    <NavBar />\n                    <Feed />\n                </Route>\n                <Route path=\"/\">\n                    <NavBar />\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { postReducer } from './modules/posts';\nimport { teamReducer } from './modules/teams';\n\nexport const rootReducer = combineReducers({\n    post: postReducer,\n    team: teamReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createStore, applyMiddleware, compose } from 'redux'\nimport {rootReducer} from './reducer'\nimport thunk from \"redux-thunk\"\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n  }\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}