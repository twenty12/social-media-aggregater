{"version":3,"sources":["features/Header.tsx","features/feed/PostCard.tsx","redux/modules/index.tsx","redux/modules/posts.tsx","redux/modules/teams.tsx","features/feed/Feed.tsx","App.tsx","redux/reducer.tsx","redux/store.tsx","index.tsx"],"names":["NavBar","className","nameToEmoji","UK","JPN","DE","PostCard","postData","accountData","created","Date","Object","keys","length","sailor","name","flag","boat","header","src","source_id","allow","title","toLocaleString","id","typedAction","type","payload","initialState","posts","loading","loadPosts","dispatch","fetch","getServerUrl","then","res","json","result","accounts","loadAccounts","console","log","Feed","useDispatch","useEffect","useSelector","state","post","team","reduce","acc","cur","i","postItems","map","account","App","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a9e3850.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function NavBar () {\n    return (\n        <nav className=\"navbar navbar-default border-bottom\">\n            <div className=\"container-fluid\">\n                <div className=\"navbar-header\">\n                    <span className=\"navbar-brand\"><h1>VendÃ©e</h1></span>\n                </div>\n            </div>\n        </nav>\n    )\n}","import React, { FunctionComponent } from \"react\"\nimport { Post } from '../../redux/modules/posts'\nimport { Account } from '../../redux/modules/teams'\n\ntype PostProps = {\n    postData: Post,\n    accountData: Account\n    // sailorData: Sailor,\n    // boatData: Boat\n}\n\nvar nameToEmoji: { [key: string]: string; } = {\n    UK: 'ðŸ‡¬ðŸ‡§',\n    JPN: 'ðŸ‡¯ðŸ‡µ',\n    DE: 'ðŸ‡©ðŸ‡ª'\n};\n\n\nconst PostCard: FunctionComponent<PostProps> = ({ postData, accountData }) => {\n    const header = () => {\n        if (Object.keys(accountData).length != 0) {\n            return (\n                <div>\n                <div className=\"d-flex\">\n                    <div className=\"mr-auto\">{accountData.sailor.name} {nameToEmoji[accountData.flag]}</div>\n                </div>\n                    <i>{accountData.sailor.boat?.name}</i>\n                </div>\n            )\n        }\n    }\n    const created: Date = new Date(postData.created)\n    return (\n    <div key={postData.id} className=\"row justify-content-center\">\n        <div className=\"my-2 col-8\">\n            <div className=\"card border-dark\">\n                <div className=\"card-header bg-white border-0\">\n                    {header()}\n                </div>\n                <div className=\"card-body\">\n                    <div className=\"embed-responsive embed-responsive-16by9\">\n                        <iframe\n                            className=\"embed-responsive-item border-0\"\n                            src={`https://www.youtube.com/embed/${postData.source_id}`}\n                            allow='autoplay; encrypted-media'\n                            title='video'\n                        />\n                    </div>\n                </div>\n                <div className=\"card-footer bg-white border-0 pt-0\">\n                    <small>{created.toLocaleString()}</small>\n                </div>\n            </div>\n        </div>\n    </div>\n)\n}\nexport default PostCard","export function typedAction<T extends string>(type: T): { type: T };\n\nexport function typedAction<T extends string, P extends any>(\n    type: T,\n    payload: P\n): { type: T; payload: P };\n\nexport function typedAction(type: string, payload?: any) {\n    return { type, payload };\n}","import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nimport { createImportSpecifier } from 'typescript';\n\n\nexport type Post = {\n    id: number,\n    account: number,\n    created: string,\n    collected: string,\n    title: string,\n    description: string,\n    url: string\n    source_id?: string,\n}\n\nexport type PostState = {\n    posts: Post[];\n    loading: boolean;\n};\n\nconst initialState: PostState = {\n    posts: [],\n    loading: true,\n};\n\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\n\nexport const addPosts = (products: Post[]) => {\n    return typedAction('posts/ADD_POSTS', products);\n};\n\nexport const loadPosts = () => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getServerUrl() + \"api/posts/\")\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addPosts(result['results'])\n                );\n            })\n    };\n};\n\ntype PostAction = ReturnType<typeof addPosts>;\n\nexport function postReducer(\n    state = initialState,\n    action: PostAction\n): PostState {\n    switch (action.type) {\n        case 'posts/ADD_POSTS':\n            return {\n                ...state,\n                loading: false,\n                posts: [...state.posts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\nexport type Account = {\n    id: number,\n    sailor: Sailor,\n    team?: Team,\n    platform: string,\n    account_id: string,\n    account_name: string,\n    flag: string\n}\n\nexport type Sailor = {\n    id: number,\n    name: string,\n    gender: string\n    age: number,\n    boat?: Boat,\n    team?: Team\n}\n\nexport type Boat = {\n    id: number,\n    name?: string,\n    built: string\n}\n\nexport type Team = {\n    name: string,\n    boat: Boat\n};\n\nexport type AccountState = {\n    accounts: Account[]\n}\n\nconst initialState: AccountState = {\n    accounts: []\n};\n\nexport const addAccount= (account:Account[]) => {\n    return typedAction('teams/ADD_ACCOUNT', account);\n};\n\n// export const addBoat = (boat:Boat[]) => {\n//     return typedAction('teams/ADD_BOAT', boat);\n// };\n\n// export const loadBoats = () => {\n//     return (dispatch: Dispatch<AnyAction>) => {\n//         setTimeout(() => {\n//             dispatch(\n//                 addBoat(boatData['boats'])\n//             );\n//         }, 1000);\n//     };\n// };\n\nexport const loadAccounts = () => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getServerUrl() + \"api/accounts/\")\n            .then(res => res.json())\n            .then((result) => {\n                console.log(result['results'])\n                dispatch(\n                    addAccount(result['results'])\n                );\n            })\n    };\n};\n\ntype ActionType = ReturnType<typeof addAccount>;\n\nexport function teamReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case 'teams/ADD_ACCOUNT':\n            return {\n                ...state,\n                accounts: [...state.accounts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","import React, { useEffect, FunctionComponent } from 'react'\nimport PostCard from './PostCard'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { loadPosts } from \"../../redux/modules/posts\"\nimport { loadAccounts } from \"../../redux/modules/teams\"\nimport { RootState } from \"../../redux/reducer\"\n\nconst arrToObjKeyedById = (arr: any) => {\n    return arr.reduce(function (acc: any, cur: any, i: number) {\n        acc[cur['id']] = cur;\n        return acc;\n    }, {});\n}\n\nconst Feed: FunctionComponent = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(loadAccounts() as any)\n        dispatch(loadPosts() as any)\n        // dispatch(loadBoats() as any)\n    }, [])\n    const posts = useSelector((state: RootState) => state.post.posts)\n    const loading = useSelector((state: RootState) => state.post.loading)\n    const accounts = arrToObjKeyedById(\n        useSelector((state: RootState) => state.team.accounts))\n\n    const postItems = posts.map((post) => {\n        const getAccountDataWhenOnceAvailable = () => (Object.keys(accounts).length === 0) ? {} : accounts[post.account!]\n        // const getBoatDataWhenOnceAvailable = () => (Object.keys(boats).length === 0) ? {} : boats[post.boatId!]\n        return <PostCard\n            postData={post}\n            accountData={getAccountDataWhenOnceAvailable()} />\n        // boatData={getBoatDataWhenOnceAvailable()}/>\n    })\n    if (loading) {\n        return <h1>Loading...</h1>\n    } else {\n        return (\n            <div className=\"container\">\n                {postItems}\n            </div>\n        )\n    }\n}\n\nexport default Feed","import React from 'react';\nimport NavBar from \"./features/Header\"\nimport Feed from \"./features/feed/Feed\"\nimport './App.css';\nimport { loadPosts } from \"./redux/modules/posts\"\nimport {useDispatch} from \"react-redux\"\nimport './index.css';\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            <NavBar />\n            {/* <button onClick={() => dispatch(loadPosts() as any)}>Load em</button> */}\n            <Feed />\n        </div>\n    );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { postReducer } from './modules/posts';\nimport { teamReducer } from './modules/teams';\n\nexport const rootReducer = combineReducers({\n    post: postReducer,\n    team: teamReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createStore, applyMiddleware, compose } from 'redux'\nimport {rootReducer} from './reducer'\nimport thunk from \"redux-thunk\"\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n  }\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}