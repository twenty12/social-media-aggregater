{"version":3,"sources":["features/Header.tsx","features/feed/PostCard.tsx","redux/modules/index.tsx","redux/modules/posts.tsx","redux/modules/teams.tsx","features/feed/Feed.tsx","App.tsx","redux/reducer.tsx","redux/store.tsx","index.tsx"],"names":["NavBar","className","href","nameToEmoji","UK","JPN","DE","FRN","PostCard","postData","accountData","useState","showThumb","setShowThumb","thumbDiv","src","thumbnail","videoDiv","source_id","allow","title","created","Date","Object","keys","length","position","sailor","boat","name","toLocaleString","flag","header","onClick","id","typedAction","type","payload","initialState","posts","loading","pageNumber","loadPosts","dispatch","fetch","console","log","getServerUrl","getPageUrl","then","res","json","result","accounts","loadAccounts","Feed","useDispatch","useSelector","state","post","useEffect","loadingDiv","team","reduce","acc","cur","i","postItems","map","account","ref","useRef","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect","useOnScreen","onScroll","e","target","scrollHeight","scrollTop","clientHeight","App","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfb352db.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function NavBar () {\n    return (\n        <nav className=\"navbar navbar-default border-bottom\">\n            <div className=\"container-fluid\">\n                <div className=\"w-100\">\n                    <div className=\"d-flex\">\n                        <span className=\"navbar-brand\">\n                            <h1>VendÃ©e Globe Tracker</h1>\n                        </span>\n                        <div className=\"ml-auto\"><small>By <a className=\"text-black\" href=\"http://danielgladstone.com\">Daniel Gladstone</a></small></div>\n                    </div>\n                    <div>All the content</div>\n\n                </div>\n            </div>\n        </nav>\n    )\n}","import React, { FunctionComponent, useEffect, useState } from \"react\"\nimport { Post } from '../../redux/modules/posts'\nimport { Account } from '../../redux/modules/teams'\n\ntype PostProps = {\n    postData: Post,\n    accountData: Account\n    // sailorData: Sailor,\n    // boatData: Boat\n}\n\nvar nameToEmoji: { [key: string]: string; } = {\n    UK: 'ðŸ‡¬ðŸ‡§',\n    JPN: 'ðŸ‡¯ðŸ‡µ',\n    DE: 'ðŸ‡©ðŸ‡ª',\n    FRN: 'ðŸ‡«ðŸ‡·',\n};\n\n\nconst PostCard: FunctionComponent<PostProps> = ({ postData, accountData }) => {\n    const [showThumb, setShowThumb] = useState(true)\n    //https://leewarrick.com/blog/a-guide-to-usestate-and-usereducer/\n    const header = () => {\n        const created: Date = new Date(postData.created)\n        if (Object.keys(accountData).length != 0) {\n            const position = accountData.sailor.boat?.position === 0 ? 'RET' : accountData.sailor.boat?.position\n            return (\n                <div>\n                    <div className=\"d-flex\">\n                        <div className=\"mr-auto\">{accountData.sailor.name}</div>\n                        <small><div>{created.toLocaleString()}</div></small>\n                    </div>\n                    <small><i>{accountData.sailor.boat?.name} {nameToEmoji[accountData.flag]}</i></small><br></br>\n                    <small>Position: {position}</small>\n                </div>\n            )\n        }\n    }\n\n    const handleClick = () => setShowThumb(false)\n    const thumbDiv = <img className=\"img-fluid\" src={postData.thumbnail} />\n    // const thumbDiv = <img className=\"img-fluid\" src={`http://i.ytimg.com/vi/${postData.source_id}/maxresdefault.jpg`}  onError={(e)=>{console.log(e)}}/>\n    const videoDiv = <div className=\"embed-responsive embed-responsive-16by9\">\n        <iframe\n            className=\"embed-responsive-item border-0\"\n            src={`https://www.youtube.com/embed/${postData.source_id}?&autoplay=1`}\n            allow='autoplay; encrypted-media'\n            title='video'\n        />\n    </div>\n\n    return (\n        <div key={postData.id} className=\"row justify-content-center\">\n            <div className=\"my-2 col-sm-12 col-md-8\">\n                <div className=\"card border-dark\">\n                    <div className=\"card-header bg-white border-0 pb-0\">\n                        {header()}\n                    </div>\n                    <div onClick={handleClick} className=\"card-body d-flex justify-content-center\">\n                        { showThumb ? thumbDiv : videoDiv }\n                    </div>\n                    <div className=\"card-footer bg-white border-0 pt-0\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default PostCard","export function typedAction<T extends string>(type: T): { type: T };\n\nexport function typedAction<T extends string, P extends any>(\n    type: T,\n    payload: P\n): { type: T; payload: P };\n\nexport function typedAction(type: string, payload?: any) {\n    return { type, payload };\n}","import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nimport { createImportSpecifier } from 'typescript';\n\n\nexport type Post = {\n    id: number,\n    account: number,\n    created: string,\n    collected: string,\n    title: string,\n    description: string,\n    url: string\n    source_id?: string,\n    thumbnail?: string,\n}\n\nexport type PostState = {\n    posts: Post[];\n    loading: boolean;\n    pageNumber: number;\n};\n\nconst initialState: PostState = {\n    posts: [],\n    loading: true,\n    pageNumber: 1\n};\n\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\n\nconst getPageUrl = (pageNumber:number) => {\n    console.log(pageNumber)\n    return getServerUrl() + \"api/posts/?page=\" + pageNumber\n}\nexport const addPosts = (products: Post[]) => {\n    return typedAction('posts/ADD_POSTS', products);\n};\n\nexport const loadPosts = (pageNumber:number) => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getPageUrl(pageNumber))\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addPosts(result['results'])\n                );\n            })\n    };\n};\n\ntype PostAction = ReturnType<typeof addPosts>;\n\nexport function postReducer(\n    state = initialState,\n    action: PostAction\n): PostState {\n    switch (action.type) {\n        case 'posts/ADD_POSTS':\n            return {\n                ...state,\n                loading: false,\n                pageNumber: state.pageNumber + 1,\n                posts: [...state.posts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\nexport type Account = {\n    id: number,\n    sailor: Sailor,\n    team?: Team,\n    platform: string,\n    account_id: string,\n    account_name: string,\n    flag: string\n}\n\nexport type Sailor = {\n    id: number,\n    name: string,\n    gender: string\n    age: number,\n    boat?: Boat,\n    team?: Team\n}\n\nexport type Boat = {\n    id: number,\n    name?: string,\n    built: string,\n    position?: number\n}\n\nexport type Team = {\n    name: string,\n    boat: Boat\n};\n\nexport type AccountState = {\n    accounts: Account[]\n}\n\nconst initialState: AccountState = {\n    accounts: []\n};\n\nexport const addAccount= (account:Account[]) => {\n    return typedAction('teams/ADD_ACCOUNT', account);\n};\n\n// export const addBoat = (boat:Boat[]) => {\n//     return typedAction('teams/ADD_BOAT', boat);\n// };\n\n// export const loadBoats = () => {\n//     return (dispatch: Dispatch<AnyAction>) => {\n//         setTimeout(() => {\n//             dispatch(\n//                 addBoat(boatData['boats'])\n//             );\n//         }, 1000);\n//     };\n// };\n\nexport const loadAccounts = () => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getServerUrl() + \"api/accounts/\")\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addAccount(result['results'])\n                );\n            })\n    };\n};\n\ntype ActionType = ReturnType<typeof addAccount>;\n\nexport function teamReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case 'teams/ADD_ACCOUNT':\n            return {\n                ...state,\n                accounts: [...state.accounts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","import React, { useEffect, FunctionComponent, useState, useRef } from 'react'\nimport PostCard from './PostCard'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { loadPosts } from \"../../redux/modules/posts\"\nimport { loadAccounts } from \"../../redux/modules/teams\"\nimport { RootState } from \"../../redux/reducer\"\n\nconst arrToObjKeyedById = (arr: any) => {\n    return arr.reduce(function (acc: any, cur: any, i: number) {\n        acc[cur['id']] = cur;\n        return acc;\n    }, {});\n}\n\nfunction useOnScreen(ref: any) {\n\n    const [isIntersecting, setIntersecting] = useState(false)\n  \n    const observer = new IntersectionObserver(\n      ([entry]) => setIntersecting(entry.isIntersecting)\n    )\n  \n    useEffect(() => {\n      observer.observe(ref.current)\n      // Remove the observer as soon as the component is unmounted\n      return () => { observer.disconnect() }\n    }, [])\n  \n    return isIntersecting\n  }\n\nconst Feed: FunctionComponent = () => {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n    useEffect(() => {\n        dispatch(loadAccounts() as any)\n        dispatch(loadPosts(pageNumber) as any)\n        // dispatch(loadBoats() as any)\n    }, [])\n    const posts = useSelector((state: RootState) => state.post.posts)\n    const loading = useSelector((state: RootState) => state.post.loading)\n    const loadingDiv = (loading) ? <h1>Loading...</h1> : ''\n    const accounts = arrToObjKeyedById(\n        useSelector((state: RootState) => state.team.accounts))\n\n    const postItems = posts.map((post) => {\n        const getAccountDataWhenOnceAvailable = () => (Object.keys(accounts).length === 0) ? {} : accounts[post.account!]\n        // const getBoatDataWhenOnceAvailable = () => (Object.keys(boats).length === 0) ? {} : boats[post.boatId!]\n        return <PostCard\n            postData={post}\n            accountData={getAccountDataWhenOnceAvailable()} />\n    })\n\n    const ref = useRef<HTMLHeadingElement>(null);\n    const isVisible = useOnScreen(ref)\n    if (isVisible && pageNumber > 1) {\n        console.log('loaded')\n        dispatch(loadPosts(pageNumber) as any)\n    }\n    const handleScroll = (e:any) => {\n        const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n        if (bottom) {\n            console.log('bottom')\n         }\n      }\n        return (\n            <div onScroll={handleScroll} className=\"container\">\n                {postItems}\n                {loadingDiv}\n                <div ref={ref}></div>\n            </div>\n        )\n}\n\nexport default Feed","import React from 'react';\nimport NavBar from \"./features/Header\"\nimport Feed from \"./features/feed/Feed\"\nimport './App.css';\nimport { loadPosts } from \"./redux/modules/posts\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport './index.css';\nimport { RootState } from \"./redux/reducer\"\n\nfunction App() {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n\n    return (\n        <div>\n            <NavBar />\n            {/* <button onClick={() => dispatch(loadPosts(pageNumber) as any)}>Load em</button> */}\n            <Feed />\n        </div>\n    );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { postReducer } from './modules/posts';\nimport { teamReducer } from './modules/teams';\n\nexport const rootReducer = combineReducers({\n    post: postReducer,\n    team: teamReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createStore, applyMiddleware, compose } from 'redux'\nimport {rootReducer} from './reducer'\nimport thunk from \"redux-thunk\"\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n  }\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}