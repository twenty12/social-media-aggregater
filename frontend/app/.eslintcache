[{"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/index.tsx":"1","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/reportWebVitals.ts":"2","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/App.tsx":"3","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/index.tsx":"4","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/posts.tsx":"5","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/store.tsx":"6","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/reducer.tsx":"7","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/Header.tsx":"8","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/Feed.tsx":"9","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/teams.tsx":"10","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/PostCard.tsx":"11"},{"size":278,"mtime":1607371277059,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607181552009,"results":"14","hashOfConfig":"13"},{"size":645,"mtime":1608085736294,"results":"15","hashOfConfig":"13"},{"size":279,"mtime":1607191502951,"results":"16","hashOfConfig":"13"},{"size":1757,"mtime":1608080212363,"results":"17","hashOfConfig":"13"},{"size":428,"mtime":1607371257143,"results":"18","hashOfConfig":"13"},{"size":286,"mtime":1607272361902,"results":"19","hashOfConfig":"13"},{"size":372,"mtime":1607210413240,"results":"20","hashOfConfig":"13"},{"size":2599,"mtime":1608080122430,"results":"21","hashOfConfig":"13"},{"size":1995,"mtime":1608070304174,"results":"22","hashOfConfig":"13"},{"size":2613,"mtime":1608133599933,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fzd65k",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/index.tsx",[],["51","52"],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/reportWebVitals.ts",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/App.tsx",["53","54","55"],"import React from 'react';\nimport NavBar from \"./features/Header\"\nimport Feed from \"./features/feed/Feed\"\nimport './App.css';\nimport { loadPosts } from \"./redux/modules/posts\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport './index.css';\nimport { RootState } from \"./redux/reducer\"\n\nfunction App() {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n\n    return (\n        <div>\n            <NavBar />\n            {/* <button onClick={() => dispatch(loadPosts(pageNumber) as any)}>Load em</button> */}\n            <Feed />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/index.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/posts.tsx",["56","57"],"import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nimport { createImportSpecifier } from 'typescript';\n\n\nexport type Post = {\n    id: number,\n    account: number,\n    created: string,\n    collected: string,\n    title: string,\n    description: string,\n    url: string\n    source_id?: string,\n    thumbnail?: string,\n}\n\nexport type PostState = {\n    posts: Post[];\n    loading: boolean;\n    pageNumber: number;\n};\n\nconst initialState: PostState = {\n    posts: [],\n    loading: true,\n    pageNumber: 1\n};\n\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\n\nconst getPageUrl = (pageNumber:number) => {\n    console.log(pageNumber)\n    return getServerUrl() + \"api/posts/?page=\" + pageNumber\n}\nexport const addPosts = (products: Post[]) => {\n    return typedAction('posts/ADD_POSTS', products);\n};\n\nexport const loadPosts = (pageNumber:number) => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getPageUrl(pageNumber))\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addPosts(result['results'])\n                );\n            })\n    };\n};\n\ntype PostAction = ReturnType<typeof addPosts>;\n\nexport function postReducer(\n    state = initialState,\n    action: PostAction\n): PostState {\n    switch (action.type) {\n        case 'posts/ADD_POSTS':\n            return {\n                ...state,\n                loading: false,\n                pageNumber: state.pageNumber + 1,\n                posts: [...state.posts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/store.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/reducer.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/Header.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/Feed.tsx",["58","59"],"import React, { useEffect, FunctionComponent, useState, useRef } from 'react'\nimport PostCard from './PostCard'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { loadPosts } from \"../../redux/modules/posts\"\nimport { loadAccounts } from \"../../redux/modules/teams\"\nimport { RootState } from \"../../redux/reducer\"\n\nconst arrToObjKeyedById = (arr: any) => {\n    return arr.reduce(function (acc: any, cur: any, i: number) {\n        acc[cur['id']] = cur;\n        return acc;\n    }, {});\n}\n\nfunction useOnScreen(ref: any) {\n\n    const [isIntersecting, setIntersecting] = useState(false)\n  \n    const observer = new IntersectionObserver(\n      ([entry]) => setIntersecting(entry.isIntersecting)\n    )\n  \n    useEffect(() => {\n      observer.observe(ref.current)\n      // Remove the observer as soon as the component is unmounted\n      return () => { observer.disconnect() }\n    }, [])\n  \n    return isIntersecting\n  }\n\nconst Feed: FunctionComponent = () => {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n    useEffect(() => {\n        dispatch(loadAccounts() as any)\n        dispatch(loadPosts(pageNumber) as any)\n        // dispatch(loadBoats() as any)\n    }, [])\n    const posts = useSelector((state: RootState) => state.post.posts)\n    const loading = useSelector((state: RootState) => state.post.loading)\n    const loadingDiv = (loading) ? <h1>Loading...</h1> : ''\n    const accounts = arrToObjKeyedById(\n        useSelector((state: RootState) => state.team.accounts))\n\n    const postItems = posts.map((post) => {\n        const getAccountDataWhenOnceAvailable = () => (Object.keys(accounts).length === 0) ? {} : accounts[post.account!]\n        // const getBoatDataWhenOnceAvailable = () => (Object.keys(boats).length === 0) ? {} : boats[post.boatId!]\n        return <PostCard\n            postData={post}\n            accountData={getAccountDataWhenOnceAvailable()} />\n    })\n\n    const ref = useRef<HTMLHeadingElement>(null);\n    const isVisible = useOnScreen(ref)\n    if (isVisible && pageNumber > 1) {\n        console.log('loaded')\n        dispatch(loadPosts(pageNumber) as any)\n    }\n    const handleScroll = (e:any) => {\n        const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n        if (bottom) {\n            console.log('bottom')\n         }\n      }\n        return (\n            <div onScroll={handleScroll} className=\"container\">\n                {postItems}\n                {loadingDiv}\n                <div ref={ref}></div>\n            </div>\n        )\n}\n\nexport default Feed","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/teams.tsx",["60"],"import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\nexport type Account = {\n    id: number,\n    sailor: Sailor,\n    team?: Team,\n    platform: string,\n    account_id: string,\n    account_name: string,\n    flag: string\n}\n\nexport type Sailor = {\n    id: number,\n    name: string,\n    gender: string\n    age: number,\n    boat?: Boat,\n    team?: Team\n}\n\nexport type Boat = {\n    id: number,\n    name?: string,\n    built: string,\n    position?: number\n}\n\nexport type Team = {\n    name: string,\n    boat: Boat\n};\n\nexport type AccountState = {\n    accounts: Account[]\n}\n\nconst initialState: AccountState = {\n    accounts: []\n};\n\nexport const addAccount= (account:Account[]) => {\n    return typedAction('teams/ADD_ACCOUNT', account);\n};\n\n// export const addBoat = (boat:Boat[]) => {\n//     return typedAction('teams/ADD_BOAT', boat);\n// };\n\n// export const loadBoats = () => {\n//     return (dispatch: Dispatch<AnyAction>) => {\n//         setTimeout(() => {\n//             dispatch(\n//                 addBoat(boatData['boats'])\n//             );\n//         }, 1000);\n//     };\n// };\n\nexport const loadAccounts = () => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getServerUrl() + \"api/accounts/\")\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addAccount(result['results'])\n                );\n            })\n    };\n};\n\ntype ActionType = ReturnType<typeof addAccount>;\n\nexport function teamReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case 'teams/ADD_ACCOUNT':\n            return {\n                ...state,\n                accounts: [...state.accounts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/PostCard.tsx",["61","62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":5,"column":10,"nodeType":"70","messageId":"71","endLine":5,"endColumn":19},{"ruleId":"68","severity":1,"message":"72","line":11,"column":11,"nodeType":"70","messageId":"71","endLine":11,"endColumn":19},{"ruleId":"68","severity":1,"message":"73","line":12,"column":11,"nodeType":"70","messageId":"71","endLine":12,"endColumn":21},{"ruleId":"68","severity":1,"message":"74","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":31,"column":30,"nodeType":"77","messageId":"78","endLine":31,"endColumn":32},{"ruleId":"79","severity":1,"message":"80","line":27,"column":8,"nodeType":"81","endLine":27,"endColumn":10,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":39,"column":8,"nodeType":"81","endLine":39,"endColumn":10,"suggestions":"84"},{"ruleId":"75","severity":1,"message":"76","line":4,"column":30,"nodeType":"77","messageId":"78","endLine":4,"endColumn":32},{"ruleId":"68","severity":1,"message":"85","line":1,"column":36,"nodeType":"70","messageId":"71","endLine":1,"endColumn":45},{"ruleId":"75","severity":1,"message":"86","line":24,"column":45,"nodeType":"77","messageId":"78","endLine":24,"endColumn":47},{"ruleId":"87","severity":1,"message":"88","line":40,"column":22,"nodeType":"89","endLine":40,"endColumn":76},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'loadPosts' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'createImportSpecifier' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'observer' and 'ref'. Either include them or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has missing dependencies: 'dispatch' and 'pageNumber'. Either include them or remove the dependency array.",["93"],"'useEffect' is defined but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [observer, ref]",{"range":"98","text":"99"},"Update the dependencies array to be: [dispatch, pageNumber]",{"range":"100","text":"101"},[888,890],"[observer, ref]",[1237,1239],"[dispatch, pageNumber]"]