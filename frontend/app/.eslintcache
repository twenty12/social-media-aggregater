[{"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/index.tsx":"1","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/reportWebVitals.ts":"2","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/App.tsx":"3","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/index.tsx":"4","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/posts.tsx":"5","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/store.tsx":"6","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/reducer.tsx":"7","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/Header.tsx":"8","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/Feed.tsx":"9","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/teams.tsx":"10","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/PostCard.tsx":"11"},{"size":278,"mtime":1607371277059,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607181552009,"results":"14","hashOfConfig":"13"},{"size":645,"mtime":1608497934855,"results":"15","hashOfConfig":"13"},{"size":279,"mtime":1607191502951,"results":"16","hashOfConfig":"13"},{"size":2085,"mtime":1608504634780,"results":"17","hashOfConfig":"13"},{"size":428,"mtime":1607371257143,"results":"18","hashOfConfig":"13"},{"size":286,"mtime":1607272361902,"results":"19","hashOfConfig":"13"},{"size":880,"mtime":1608501936724,"results":"20","hashOfConfig":"13"},{"size":3757,"mtime":1608507190460,"results":"21","hashOfConfig":"13"},{"size":2016,"mtime":1608505822389,"results":"22","hashOfConfig":"13"},{"size":3053,"mtime":1608507236207,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fzd65k",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/index.tsx",[],["53","54"],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/reportWebVitals.ts",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/App.tsx",["55","56","57"],"import React from 'react';\nimport NavBar from \"./features/Header\"\nimport Feed from \"./features/feed/Feed\"\nimport './App.css';\nimport { loadPosts } from \"./redux/modules/posts\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport './index.css';\nimport { RootState } from \"./redux/reducer\"\n\nfunction App() {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n\n    return (\n        <div>\n            <NavBar />\n            {/* <button onClick={() => dispatch(loadPosts(pageNumber) as any)}>Load em</button> */}\n            <Feed />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/index.tsx",[],["58","59"],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/posts.tsx",["60","61"],"import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nimport { createImportSpecifier } from 'typescript';\n\n\nexport type Post = {\n    id: number,\n    account: number,\n    created: string,\n    collected: string,\n    title: string,\n    description: string,\n    url: string\n    source_id?: string,\n    thumbnail?: string,\n}\n\nexport type PostState = {\n    posts: Post[];\n    loading: boolean;\n    pageNumber: number;\n    showInfo: boolean;\n};\n\nconst initialState: PostState = {\n    posts: [],\n    loading: true,\n    pageNumber: 1,\n    showInfo: false\n};\n\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\n\nconst getPageUrl = (pageNumber:number) => {\n    console.log(pageNumber)\n    return getServerUrl() + \"api/posts/?page=\" + pageNumber\n}\nexport const addPosts = (products: Post[]) => {\n    return typedAction('posts/ADD_POSTS', products);\n};\n\nexport const loadPosts = (pageNumber:number) => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getPageUrl(pageNumber))\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addPosts(result['results'])\n                );\n            })\n    };\n};\n\ninterface ActionB {\n    type: 'posts/TOGGLE_INFO';\n}\nexport const toggleInfo = () => {\n    return typedAction('posts/TOGGLE_INFO');\n};\n\ntype PostAction = ReturnType<typeof addPosts> | ActionB;\n\nexport function postReducer(\n    state = initialState,\n    action: PostAction\n): PostState {\n    switch (action.type) {\n        case 'posts/ADD_POSTS':\n            return {\n                ...state,\n                loading: false,\n                pageNumber: state.pageNumber + 1,\n                posts: [...state.posts, ...action.payload],\n            };\n        case 'posts/TOGGLE_INFO':\n            return {\n                ...state,\n                showInfo: !state.showInfo\n            };\n        default:\n            return state;\n    }\n}","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/store.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/reducer.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/Header.tsx",[],"/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/Feed.tsx",["62","63","64"],"import React, { useEffect, FunctionComponent, useState, useRef } from 'react'\nimport PostCard from './PostCard'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { loadPosts, toggleInfo } from \"../../redux/modules/posts\"\nimport { loadAccounts, Account } from \"../../redux/modules/teams\"\nimport { RootState } from \"../../redux/reducer\"\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\n\nconst arrToObjKeyedById = (arr: any) => {\n    return arr.reduce(function (acc: any, cur: any, i: number) {\n        acc[cur['id']] = cur;\n        return acc;\n    }, {});\n}\n\nfunction useOnScreen(ref: any) {\n\n    const [isIntersecting, setIntersecting] = useState(false)\n\n    const observer = new IntersectionObserver(\n        ([entry]) => setIntersecting(entry.isIntersecting)\n    )\n\n    useEffect(() => {\n        observer.observe(ref.current)\n        // Remove the observer as soon as the component is unmounted\n        return () => { observer.disconnect() }\n    }, [])\n\n    return isIntersecting\n}\n\nconst Feed: FunctionComponent = () => {\n    const dispatch = useDispatch()\n    const pageNumber = useSelector((state: RootState) => state.post.pageNumber)\n    const showInfo = useSelector((state: RootState) => state.post.showInfo)\n    useEffect(() => {\n        dispatch(loadAccounts() as any)\n        dispatch(loadPosts(pageNumber) as any)\n        // dispatch(loadBoats() as any)\n    }, [])\n    const posts = useSelector((state: RootState) => state.post.posts)\n    const loading = useSelector((state: RootState) => state.post.loading)\n    const loadingDiv = (loading) ? <h1>Loading...</h1> : ''\n    const accounts = arrToObjKeyedById(\n        useSelector((state: RootState) => state.team.accounts))\n\n    const postItems = posts.map((post) => {\n        const getAccountDataWhenOnceAvailable = () => (Object.keys(accounts).length === 0) ? {} : accounts[post.account!]\n        // const getBoatDataWhenOnceAvailable = () => (Object.keys(boats).length === 0) ? {} : boats[post.boatId!]\n        return <PostCard\n            postData={post}\n            accountData={getAccountDataWhenOnceAvailable()} />\n    })\n    \n    const ref = useRef<HTMLHeadingElement>(null);\n    const isVisible = useOnScreen(ref)\n    if (isVisible && pageNumber > 1) {\n        console.log('loaded')\n        dispatch(loadPosts(pageNumber) as any)\n    }\n    const getDateString = (updated: string) => {\n        const created: Date = new Date(updated)\n        return created.toLocaleString()\n    }\n    const getInfoCard = () => {\n        console.log(accounts)\n        if (showInfo) {\n            return (\n                <div className=\"col-sm-12 mt-1 col-md-8 d-flex\">\n                    <div className=\"card border-dark w-100 \">\n                        <div className=\"card-body py-1\">\n                            <div><small>Accounts monitored: {Object.keys(accounts).length}</small></div>\n                            <div><small>Last updated: { (Object.keys(accounts).length < 2 ? 'a' : getDateString(accounts['1'].updated))}</small></div>\n                            {/* <div><small>Last updated race positions: { (Object.keys(accounts).length < 2 ? 'a' : getDateString(accounts['1'].updated))}</small></div> */}\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-sm-12 mt-1 col-md-8 d-flex\">\n                    <AiOutlineInfoCircle onClick={() => dispatch(toggleInfo() as any)} />\n                </div>\n                {getInfoCard()}\n            </div>\n            {postItems}\n            {loadingDiv}\n            <div ref={ref}></div>\n        </div>\n    )\n}\n\nexport default Feed","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/redux/modules/teams.tsx",["65"],"import { typedAction } from './index';\nimport { Dispatch, AnyAction } from 'redux';\nconst getServerUrl = () => {\n    if (process.env.NODE_ENV == 'development') {\n        return 'http://localhost:8000/'\n    } else {\n        return 'https://social-media-aggregater.herokuapp.com/'\n    }\n}\nexport type Account = {\n    id: number,\n    sailor: Sailor,\n    team?: Team,\n    platform: string,\n    account_id: string,\n    account_name: string,\n    flag: string,\n    updated: string\n}\n\nexport type Sailor = {\n    id: number,\n    name: string,\n    gender: string\n    age: number,\n    boat?: Boat,\n    team?: Team\n}\n\nexport type Boat = {\n    id: number,\n    name?: string,\n    built: string,\n    position?: number\n}\n\nexport type Team = {\n    name: string,\n    boat: Boat\n};\n\nexport type AccountState = {\n    accounts: Account[]\n}\n\nconst initialState: AccountState = {\n    accounts: []\n};\n\nexport const addAccount= (account:Account[]) => {\n    return typedAction('teams/ADD_ACCOUNT', account);\n};\n\n// export const addBoat = (boat:Boat[]) => {\n//     return typedAction('teams/ADD_BOAT', boat);\n// };\n\n// export const loadBoats = () => {\n//     return (dispatch: Dispatch<AnyAction>) => {\n//         setTimeout(() => {\n//             dispatch(\n//                 addBoat(boatData['boats'])\n//             );\n//         }, 1000);\n//     };\n// };\n\nexport const loadAccounts = () => {\n    return (dispatch: Dispatch<AnyAction>) => {\n        fetch(getServerUrl() + \"api/accounts/\")\n            .then(res => res.json())\n            .then((result) => {\n                dispatch(\n                    addAccount(result['results'])\n                );\n            })\n    };\n};\n\ntype ActionType = ReturnType<typeof addAccount>;\n\nexport function teamReducer(state = initialState, action: ActionType) {\n    switch (action.type) {\n        case 'teams/ADD_ACCOUNT':\n            return {\n                ...state,\n                accounts: [...state.accounts, ...action.payload],\n            };\n        default:\n            return state;\n    }\n}","/Users/danielgladstone/Documents/social-media-aggregater/frontend/app/src/features/feed/PostCard.tsx",["66","67","68"],"import React, { FunctionComponent, useEffect, useState } from \"react\"\nimport { Post } from '../../redux/modules/posts'\nimport { Account } from '../../redux/modules/teams'\n\ntype PostProps = {\n    postData: Post,\n    accountData: Account\n    // sailorData: Sailor,\n    // boatData: Boat\n}\n\nvar nameToEmoji: { [key: string]: string; } = {\n    UK: '🇬🇧',\n    JPN: '🇯🇵',\n    DE: '🇩🇪',\n    FRN: '🇫🇷',\n    CH: '🇨🇭',\n    IT: '🇮🇹'\n};\nconst wrapTags = (text: string, regex: RegExp, className?: string) => {\n    const textArray = text.split(regex);\n    return textArray.map(str => {\n      if (RegExp(':').test(str)) {\n        return <span className=\"d-block d-md-inline\">{str}</span>;\n      }\n      return str;\n    });\n  };\n\nconst PostCard: FunctionComponent<PostProps> = ({ postData, accountData }) => {\n    const [showThumb, setShowThumb] = useState(true)\n    //https://leewarrick.com/blog/a-guide-to-usestate-and-usereducer/\n    const header = () => {\n        const created: Date = new Date(postData.created)\n        if (Object.keys(accountData).length != 0) {\n            const position = accountData.sailor.boat?.position === 0 ? 'RET' : accountData.sailor.boat?.position\n            return (\n                <div>\n                    <div className=\"d-flex\">\n                        <div className=\"mr-auto \">{accountData.sailor.name}</div>\n                        <small className=\"mt-2 mb-n2\">{wrapTags(created.toLocaleString(), RegExp(','), 'dog')}</small>\n                    </div>\n                    <small><i>{accountData.sailor.boat?.name} {nameToEmoji[accountData.flag]} </i></small><br></br>\n                    <small>Position: {position}</small>\n                </div>\n            )\n        }\n    }\n\n    const handleClick = () => setShowThumb(false)\n    const thumbDiv = <img className=\"img-fluid\" src={postData.thumbnail} />\n    // const thumbDiv = <img className=\"img-fluid\" src={`http://i.ytimg.com/vi/${postData.source_id}/maxresdefault.jpg`}  onError={(e)=>{console.log(e)}}/>\n    const videoDiv = <div className=\"embed-responsive embed-responsive-16by9\">\n        <iframe\n            className=\"embed-responsive-item border-0\"\n            src={`https://www.youtube.com/embed/${postData.source_id}?&autoplay=1`}\n            allow='autoplay; encrypted-media'\n            title='video'\n        />\n    </div>\n\n    return (\n        <div key={postData.id} className=\"row justify-content-center\">\n            <div className=\"my-2 col-sm-12 col-md-8\">\n                <div className=\"card border-dark\">\n                    <div className=\"card-header bg-white border-0 pb-0\">\n                        {header()}\n                    </div>\n                    <div onClick={handleClick} className=\"card-body d-flex justify-content-center\">\n                        { showThumb ? thumbDiv : videoDiv }\n                    </div>\n                    <div className=\"card-footer bg-white border-0 pt-0\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default PostCard",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":5,"column":10,"nodeType":"75","messageId":"76","endLine":5,"endColumn":19},{"ruleId":"73","severity":1,"message":"77","line":11,"column":11,"nodeType":"75","messageId":"76","endLine":11,"endColumn":19},{"ruleId":"73","severity":1,"message":"78","line":12,"column":11,"nodeType":"75","messageId":"76","endLine":12,"endColumn":21},{"ruleId":"69","replacedBy":"79"},{"ruleId":"71","replacedBy":"80"},{"ruleId":"73","severity":1,"message":"81","line":3,"column":10,"nodeType":"75","messageId":"76","endLine":3,"endColumn":31},{"ruleId":"82","severity":1,"message":"83","line":33,"column":30,"nodeType":"84","messageId":"85","endLine":33,"endColumn":32},{"ruleId":"73","severity":1,"message":"86","line":5,"column":24,"nodeType":"75","messageId":"76","endLine":5,"endColumn":31},{"ruleId":"87","severity":1,"message":"88","line":28,"column":8,"nodeType":"89","endLine":28,"endColumn":10,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":41,"column":8,"nodeType":"89","endLine":41,"endColumn":10,"suggestions":"92"},{"ruleId":"82","severity":1,"message":"83","line":4,"column":30,"nodeType":"84","messageId":"85","endLine":4,"endColumn":32},{"ruleId":"73","severity":1,"message":"93","line":1,"column":36,"nodeType":"75","messageId":"76","endLine":1,"endColumn":45},{"ruleId":"82","severity":1,"message":"94","line":35,"column":45,"nodeType":"84","messageId":"85","endLine":35,"endColumn":47},{"ruleId":"95","severity":1,"message":"96","line":51,"column":22,"nodeType":"97","endLine":51,"endColumn":76},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"@typescript-eslint/no-unused-vars","'loadPosts' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'pageNumber' is assigned a value but never used.",["98"],["99"],"'createImportSpecifier' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Account' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'observer' and 'ref'. Either include them or remove the dependency array.","ArrayExpression",["100"],"React Hook useEffect has missing dependencies: 'dispatch' and 'pageNumber'. Either include them or remove the dependency array.",["101"],"'useEffect' is defined but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [observer, ref]",{"range":"106","text":"107"},"Update the dependencies array to be: [dispatch, pageNumber]",{"range":"108","text":"109"},[967,969],"[observer, ref]",[1388,1390],"[dispatch, pageNumber]"]